//Áªô‰Ω†‰∏Ä‰∏™Êúâ n ‰∏™ËäÇÁÇπÁöÑ ÊúâÂêëÊó†ÁéØÂõæÔºàDAGÔºâÔºåËØ∑‰Ω†ÊâæÂá∫ÊâÄÊúâ‰ªéËäÇÁÇπ 0 Âà∞ËäÇÁÇπ n-1 ÁöÑË∑ØÂæÑÂπ∂ËæìÂá∫Ôºà‰∏çË¶ÅÊ±ÇÊåâÁâπÂÆöÈ°∫Â∫èÔºâ 
//
// 
// graph[i] ÊòØ‰∏Ä‰∏™‰ªéËäÇÁÇπ i ÂèØ‰ª•ËÆøÈóÆÁöÑÊâÄÊúâËäÇÁÇπÁöÑÂàóË°®ÔºàÂç≥‰ªéËäÇÁÇπ i Âà∞ËäÇÁÇπ graph[i][j]Â≠òÂú®‰∏ÄÊù°ÊúâÂêëËæπÔºâ„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//
// 
//ËæìÂÖ•Ôºögraph = [[1,2],[3],[3],[]]
//ËæìÂá∫Ôºö[[0,1,3],[0,2,3]]
//Ëß£ÈáäÔºöÊúâ‰∏§Êù°Ë∑ØÂæÑ 0 -> 1 -> 3 Âíå 0 -> 2 -> 3
// 
//
// Á§∫‰æã 2Ôºö 
//
// 
//
// 
//ËæìÂÖ•Ôºögraph = [[4,3,1],[3,2,4],[3],[4],[]]
//ËæìÂá∫Ôºö[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// n == graph.length 
// 2 <= n <= 15 
// 0 <= graph[i][j] < n 
// graph[i][j] != iÔºàÂç≥‰∏çÂ≠òÂú®Ëá™ÁéØÔºâ 
// graph[i] ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥† ‰∫í‰∏çÁõ∏Âêå 
// ‰øùËØÅËæìÂÖ•‰∏∫ ÊúâÂêëÊó†ÁéØÂõæÔºàDAGÔºâ 
// 
//
// 
//
// Related Topics Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Âõæ ÂõûÊ∫Ø üëç 391 üëé 0

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    int[][] graph;
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> ans = new ArrayList<>();
        if (graph == null || graph.length == 0 || graph[0].length == 0) {
            return ans;
        }
        this.graph = graph;
        List<Integer> path = new ArrayList<>();
        path.add(0);
        dfs(0, path, ans);
        return ans;
    }

    private void dfs(int v, List<Integer> path, List<List<Integer>> ans) {
        if (v == graph.length - 1) {
            ans.add(new ArrayList<>(path));
            return;
        }

        for (int num: graph[v]) {
            path.add(num);
            dfs(num, path, ans);
            path.remove(path.size() - 1);
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> ans = new ArrayList<>();
        if (graph == null || graph.length == 0 || graph[0].length == 0) {
            return ans;
        }

        Queue<List<Integer>> queue = new LinkedList<>();
        List<Integer> path = new ArrayList<>();
        path.add(0);
        queue.offer(path);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i ++) {
                List<Integer> curr = queue.poll();
                int u = curr.get(curr.size() - 1);
                if (u == graph.length - 1) {
                    ans.add(curr);
                    continue;
                }

                for (int v: graph[u]) {
                    List<Integer> next = new ArrayList<>(curr);
                    next.add(v);
                    queue.offer(next);
                }
            }
        }

        return ans;
    }
}